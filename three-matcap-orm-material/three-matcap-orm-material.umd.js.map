{"version":3,"file":"three-matcap-orm-material.umd.js","sources":["../src/materials/MeshMatcapORMMaterial.ts","../src/shaders/shaderChunk/matcapORMUniform.ts","../src/shaders/shaderChunk/matcapORM.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport {\n    Color,\n    MeshMatcapMaterial,\n    Texture,\n    type MeshMatcapMaterialParameters,\n    type Shader,\n} from 'three';\n\nimport matcapORMUniform from '../shaders/shaderChunk/matcapORMUniform';\nimport matcapORM from '../shaders/shaderChunk/matcapORM';\n\nexport class MeshMatcapORMMaterial extends MeshMatcapMaterial {\n    private customUniforms: {\n        uMap2: { value: Texture | null };\n        uRoughness: { value: number };\n        uRoughnessMap: { value: Texture | null };\n        uMetalness: { value: number };\n        uColor: { value: Color };\n    };\n\n    constructor(parameters?: MeshMatcapMaterialParameters) {\n        super(parameters);\n\n        this.customUniforms = {\n            uMap2: { value: null },\n            uRoughness: { value: 0 },\n            uRoughnessMap: { value: null },\n            uMetalness: { value: 0 },\n            uColor: { value: new Color(0xFFFFFF) },\n        };\n\n        this.setValues(parameters as MeshMatcapMaterialParameters);\n\n        this.onBeforeCompile = (shader: Shader) => {\n\n            (shader as any).defines = Object.assign(\n                (shader as any).defines,\n                {\n                    USE_UV: '',\n                }\n            );\n\n            shader.uniforms = Object.assign(\n                shader.uniforms,\n                this.customUniforms,\n            );\n            shader.fragmentShader = shader.fragmentShader.replace(\n                '#define MATCAP',\n                matcapORMUniform,\n            );\n            shader.fragmentShader = shader.fragmentShader.replace(\n                'vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;',\n                matcapORM,\n            );\n        };\n    }\n    set color2(value: Color) {\n        this.customUniforms.uColor.value = value;\n    }\n\n    get color2() {\n        return this.customUniforms.uColor.value;\n    }\n\n    set map2(value: Texture | null) {\n        if (value)\n            this.defines.USE_MAP2 = '';\n        else\n            delete this.defines.USE_MAP2;\n        this.customUniforms.uMap2.value = value;\n    }\n\n    get map2() {\n        return this.customUniforms.uMap2.value;\n    }\n\n    set roughness(value: number) {\n        this.customUniforms.uRoughness.value = value;\n    }\n\n    get roughness() {\n        return this.customUniforms.uRoughness.value;\n    }\n\n    set roughnessMap(value: Texture | null) {\n        this.customUniforms.uRoughnessMap.value = value;\n    }\n\n    get roughnessMap() {\n        return this.customUniforms.uRoughnessMap.value;\n    }\n\n    set metalness(value: number) {\n        this.customUniforms.uMetalness.value = value;\n    }\n\n    get metalness() {\n        return this.customUniforms.uMetalness.value;\n    }\n}\n","export default /* glsl */ `\n#define MATCAP\n\nuniform float uPower;\nuniform float uRoughness;\nuniform float uMetalness;\nuniform vec3 uColor;\n\nuniform sampler2D uMap2;\nuniform sampler2D uRoughnessMap;\nuniform sampler2D uMetalnessMap;\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec4 getCellMatcap( sampler2D matcap, vec2 uv, float row, float col ) {\n    return texture2D(matcap, vec2(uv.x/3., uv.y/3.) + vec2(1./3.*col, 1./3.*row) );\n}\n`;\n","export default /* glsl */ `\nvec3 outgoingLight = vec3( 0.0 );\n\nvec4 matcap0 = getCellMatcap(matcap, uv, 2., 0.);\nvec4 matcap1 = getCellMatcap(matcap, uv, 2., 1.);\nvec4 matcap2 = getCellMatcap(matcap, uv, 2., 2.);\nvec4 matcap3 = getCellMatcap(matcap, uv, 1., 0.);\nvec4 matcap4 = getCellMatcap(matcap, uv, 1., 1.);\nvec4 matcap5 = getCellMatcap(matcap, uv, 1., 2.);\nvec4 matcap6 = getCellMatcap(matcap, uv, 0., 0.);\nvec4 matcap7 = getCellMatcap(matcap, uv, 0., 1.);\nvec4 matcap8 = getCellMatcap(matcap, uv, 0., 2.);\n\nfloat roughness = uRoughness;\n\n#ifdef USE_ROUGHNESSMAP\n    vec4 roughnessMapColor = texture2D( uRoughnessMap, vUv );\n    roughness = roughnessMapColor.g;\n#endif\n\nfloat interval = 1./8.;\n\nmatcap0.rgb *= clamp( map(roughness, 0., interval, 1., 0.), 0., 1.);\n\nmatcap1.rgb *= clamp( map(roughness, .0, interval, 0., 1.), 0., 1.);\nmatcap1.rgb *= clamp( map(roughness, interval, interval * 2., 1., 0.), 0., 1.);\n\nmatcap2.rgb *= clamp( map(roughness, interval * 1., interval * 2., 0., 1.), 0., 1.);\nmatcap2.rgb *= clamp( map(roughness, interval * 2., interval * 3., 1., 0.), 0., 1.);\n\nmatcap3.rgb *= clamp( map(roughness, interval * 2., interval * 3., 0., 1.), 0., 1.);\nmatcap3.rgb *= clamp( map(roughness, interval * 3., interval * 4., 1., 0.), 0., 1.);\n\nmatcap4.rgb *= clamp( map(roughness, interval * 3., interval * 4., 0., 1.), 0., 1.);\nmatcap4.rgb *= clamp( map(roughness, interval * 4., interval * 5., 1., 0.), 0., 1.);\n\nmatcap5.rgb *= clamp( map(roughness, interval * 4., interval * 5., 0., 1.), 0., 1.);\nmatcap5.rgb *= clamp( map(roughness, interval * 5., interval * 6., 1., 0.), 0., 1.);\n\nmatcap6.rgb *= clamp( map(roughness, interval * 5., interval * 6., 0., 1.), 0., 1.);\nmatcap6.rgb *= clamp( map(roughness, interval * 6., interval * 7., 1., 0.), 0., 1.);\n\nmatcap7.rgb *= clamp( map(roughness, interval * 6., interval * 7., 0., 1.), 0., 1.);\nmatcap7.rgb *= clamp( map(roughness, interval * 7., interval * 8., 1., 0.), 0., 1.);\n\nmatcap8.rgb *= clamp( map(roughness, interval * 7., interval * 8., 0., 1.), 0., 1.);\n\nvec3 matcapProgress = \n    matcap0.rgb + matcap1.rgb + matcap2.rgb + matcap3.rgb + matcap4.rgb + \n    matcap5.rgb + matcap6.rgb + matcap7.rgb + matcap8.rgb;\n\ndiffuseColor.rgb = uColor;\n#ifdef USE_MAP2\n    diffuseColor.rgb = texture2D( uMap2, vUv ).rgb;\n#endif\noutgoingLight = diffuseColor.rgb * matcapProgress;\n`;\n"],"names":["_MeshMatcapMaterial","MeshMatcapORMMaterial","parameters","_this","call","this","customUniforms","uMap2","value","uRoughness","uRoughnessMap","uMetalness","uColor","Color","setValues","onBeforeCompile","shader","defines","Object","assign","USE_UV","uniforms","fragmentShader","replace","key","get","set","USE_MAP2","MeshMatcapMaterial"],"mappings":"ibAYmC,SAAAA,eAS/B,SAAAC,EAAYC,OAAyCC,EAkC/C,OAjCFA,EAAAH,EAAAI,KAAAC,KAAMH,IAAYC,MATdG,oBAAc,EAWlBH,EAAKG,eAAiB,CAClBC,MAAO,CAAEC,MAAO,MAChBC,WAAY,CAAED,MAAO,GACrBE,cAAe,CAAEF,MAAO,MACxBG,WAAY,CAAEH,MAAO,GACrBI,OAAQ,CAAEJ,MAAO,IAAIK,EAAKA,MAAC,YAG/BV,EAAKW,UAAUZ,GAEfC,EAAKY,gBAAkB,SAACC,GAEnBA,EAAeC,QAAUC,OAAOC,OAC5BH,EAAeC,QAChB,CACIG,OAAQ,KAIhBJ,EAAOK,SAAWH,OAAOC,OACrBH,EAAOK,SACPlB,EAAKG,gBAETU,EAAOM,eAAiBN,EAAOM,eAAeC,QAC1C,iBChDhB,ghBDmDYP,EAAOM,eAAiBN,EAAOM,eAAeC,QAC1C,2DEpDhB,w0EFuDQ,EAAEpB,CACN,CAuCC,SAnF8BH,KAAAC,2EA4C9BA,KAAAuB,CAAAA,CAAAA,IAAAC,SAAAA,IAKD,WACI,OAAWpB,KAACC,eAAeM,OAAOJ,KACtC,EAACkB,IAND,SAAWlB,GACPH,KAAKC,eAAeM,OAAOJ,MAAQA,CACvC,IAACgB,IAAA,OAAAC,IAcD,WACI,OAAWpB,KAACC,eAAeC,MAAMC,KACrC,EAACkB,IAVD,SAASlB,GACDA,EACAH,KAAKY,QAAQU,SAAW,UAEjBtB,KAAKY,QAAQU,SACxBtB,KAAKC,eAAeC,MAAMC,MAAQA,CACtC,GAAC,CAAAgB,IAAAC,YAAAA,IAUD,WACI,OAAWpB,KAACC,eAAeG,WAAWD,KAC1C,EAACkB,IAND,SAAclB,GACVH,KAAKC,eAAeG,WAAWD,MAAQA,CAC3C,GAACgB,CAAAA,mBAAAC,IAUD,WACI,OAAOpB,KAAKC,eAAeI,cAAcF,KAC7C,EAACkB,IAND,SAAiBlB,GACbH,KAAKC,eAAeI,cAAcF,MAAQA,CAC9C,IAACgB,IAAA,YAAAC,IAUD,WACI,OAAWpB,KAACC,eAAeK,WAAWH,KAC1C,EAACkB,IAND,SAAclB,GACVH,KAAKC,eAAeK,WAAWH,MAAQA,CAC3C,mgBAACP,CAAA,CAnF8B,CAAQ2B,EAAkBA"}